{"version":3,"sources":["weatherinfo.js","App.js","reportWebVitals.js","index.js"],"names":["defaults","WeatherInfo","props","weatherIcon","weatherName","Fragment","className","icon","color","size","animate","humidity","visiblity","windSpeed","feelsLike","maxTemp","App","state","latitude","longitude","temp","locationName","country","getPosition","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","a","fetch","api","json","data","console","log","setState","Math","round","main","name","sys","visibility","wind","speed","feels_like","temp_max","weather","this","then","position","coords","format","ticking","date","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15c2715f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport ReactAnimatedWeather from 'react-animated-weather';\r\nconst defaults = {\r\n    icon: 'CLEAR_DAY',\r\n    color: 'white',\r\n    size: 100,\r\n    animate: true\r\n  };\r\nfunction WeatherInfo(props) {\r\n    var weatherIcon = null;\r\n    switch(props.weatherName){\r\n        case \"Haze\":\r\n        weatherIcon = 'CLOUDY';\r\n        break;\r\n        case \"Rain\":\r\n        weatherIcon = 'RAIN';\r\n        break;\r\n        case \"RAIN\":\r\n        weatherIcon = 'CLOUDY'\r\n        default:\r\n        weatherIcon = 'CLEAR_DAY'  \r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"col-4 side-bg text-center py-3\">\r\n                <ReactAnimatedWeather\r\n                    icon={weatherIcon}\r\n                    color={defaults.color}\r\n                    size={defaults.size}\r\n                    animate={defaults.animate}\r\n                />\r\n                <h2 className=\"text-white py-2\">{props.weatherName}</h2>\r\n                <div className=\"d-flex flex-wrap\">\r\n                    <div className=\"d-flex col-12 py-1\">\r\n                        <div className=\"text-white\"><strong>Humidity</strong></div>\r\n                        <div className=\"text-white ml-auto\">{props.humidity}%</div>\r\n                    </div>\r\n                    <div className=\"d-flex col-12 py-1\">\r\n                        <div className=\"text-white\"><strong>Visiblity</strong></div>\r\n                        <div className=\"text-white ml-auto\">{props.visiblity} mi</div>\r\n                    </div>\r\n                    <div className=\"d-flex col-12 py-1\">\r\n                        <div className=\"text-white\"><strong>Wind Speed</strong></div>\r\n                        <div className=\"text-white ml-auto\">{props.windSpeed} Km/h</div>\r\n                    </div>\r\n                    <div className=\"d-flex col-12 py-1\">\r\n                        <div className=\"text-white\"><strong>Feels Like</strong></div>\r\n                        <div className=\"text-white ml-auto\">{props.feelsLike}°C</div>\r\n                    </div>\r\n                    <div className=\"d-flex col-12 py-1\">\r\n                        <div className=\"text-white\"><strong>Max Temp</strong></div>\r\n                        <div className=\"text-white ml-auto\">{props.maxTemp}°C</div>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default WeatherInfo;","import React, { Component } from 'react'\nimport Clock from 'react-live-clock';\nimport './App.css';\nimport WeatherInfo from './weatherinfo';\n\nclass App extends React.Component{\n  state = {\n    latitude:null,\n    longitude:null,\n    temp:null,\n    locationName:null,\n    country:null, humidity: null,\n    visiblity: null,\n    windSpeed: null,\n    feelsLike: null,\n    maxTemp: null,\n    weatherName: null\n  }\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n    .then((position) => {\n      console.log(position.coords.latitude);\n      // this.setState({latitude:position.coords.latitude})\n      this.getWeather(position.coords.latitude,position.coords.longitude)\n    })\n    }\n    // navigator.geolocation.getCurrentPosition(function(position) {\n      \n    //   this.setState({latitude: position.coords.latitudeposition.coords.latitude})\n    // })\n  }\n  getPosition = () => {\n    return new Promise(function(resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject);\n    });\n  }\n  getWeather = async (latitude, longitude) => {\n    const api = await fetch (\n      `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&appid=7d31f3d7b503ca4cf7e10b1509619539`\n    );\n    const data = await api.json();\n    console.log(data);\n    this.setState(\n      {\n        temp:Math.round(data.main.temp),\n        locationName: data.name,\n        country:data.sys.country,\n        humidity: data.main.humidity,\n        visiblity: data.visibility,\n        windSpeed: data.wind.speed,\n        feelsLike: data.main.feels_like,\n        maxTemp: data.main.temp_max,\n        weatherName: data.weather[0].main  \n      }\n    )\n\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"col-8 d-flex justify-content-center py-5\">\n          <div className=\"col-6 app-bg d-flex flex-wrap py-3\">\n            <div className=\"col-12\">\n              <h2 className=\"text-white m-0\">{(this.state.locationName)}</h2>\n              <p className=\"text-white\">{(this.state.country)}</p>\n            </div>\n            <div className=\"col-12 mt-auto d-flex\">\n              <div className=\"my-auto\">\n              <h2 className=\"text-white m-0\"><Clock format={'HH:mm:ss'} ticking={true}/></h2>\n              <p className=\"text-white\"><Clock date={''} format={'dddd, MMMM DD, YYYY'} /></p>\n              </div>\n              <div className=\"ml-auto\">\n              <h1 className=\"text-white\">{(this.state.temp)}°C</h1>\n              </div>\n            </div>\n          </div>\n          {/* <div className=\"col-4 side-bg\"> */}\n               <WeatherInfo humidity={this.state.humidity} visiblity={this.state.visiblity} windSpeed={this.state.windSpeed} feelsLike={this.state.feelsLike} maxTemp={this.state.maxTemp} weatherName={this.state.weatherName} />\n          {/* </div> */}\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}